<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jianzhong.demo.repository.UserMapper">
  <resultMap id="BaseResultMap" type="com.jianzhong.demo.domain.User">
    <id column="uid" jdbcType="BIGINT" property="uid" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="is_del" jdbcType="BIT" property="is_del" />
    <result column="create_time" jdbcType="INTEGER" property="create_time" />
    <result column="update_time" jdbcType="INTEGER" property="update_time" />
    <result column="roles" jdbcType="VARCHAR" property="roles" />

    <collection property="userMails" ofType="com.jianzhong.demo.domain.UserMail" column="uid">
      <id property="user_mail_id" column="user_mail_id"></id>
      <result property="mail" column="mail"></result>
    </collection>
  </resultMap>
  <!--开启本mapper的namespace下的二级缓存-->
  <!--
      eviction:代表的是缓存回收策略，目前MyBatis提供以下策略。
      (1) LRU,最近最少使用的，一处最长时间不用的对象
      (2) FIFO,先进先出，按对象进入缓存的顺序来移除他们
      (3) SOFT,软引用，移除基于垃圾回收器状态和软引用规则的对象
      (4) WEAK,弱引用，更积极的移除基于垃圾收集器状态和弱引用规则的对象。这里采用的是LRU，移除最长时间不用的对形象

      flushInterval:刷新间隔时间，单位为毫秒，这里配置的是3600秒刷新，如果你不配置它，那么当SQL被执行的时候才会去刷新缓存。
      size:引用数目，一个正整数，代表缓存最多可以存储多少个对象，不宜设置过大。设置过大会导致内存溢出。这里配置的是1024个对象
      readOnly:只读，意味着缓存数据只能读取而不能修改，这样设置的好处是我们可以快速读取缓存，缺点是我们没有办法修改缓存，他的默认值是false，不允许我们修改
  -->
  <cache type="com.jianzhong.demo.utils.RedisCacheUtil" eviction="LRU" flushInterval="3600000" size="1024" readOnly="false"/>
  <sql id="Base_Filter_Column_List">
    uid,
    username,
--     password,
    is_del,
    create_time,
    update_time,
    roles
  </sql>
  <sql id="Base_Column_List">
    uid,
    username,
    password,
    is_del,
    create_time,
    update_time,
    roles
  </sql>
  <select id="loadUserByUsername" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from sp_user
    where username = #{username,jdbcType=VARCHAR} and is_del = 0
  </select>

  <select id="selectByPrimaryKeys" parameterType="List" resultMap="BaseResultMap">
    select
    <include refid="Base_Filter_Column_List" />
    from sp_user
    where uid in
    <foreach collection="list" item="uid" index="index" open="(" close=")" separator=",">
      #{uid}
    </foreach>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Filter_Column_List" />
    from sp_user
    where uid = #{uid,jdbcType=BIGINT}
  </select>
  <select id="select" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from sp_user
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from sp_user
    where uid = #{uid,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.jianzhong.demo.domain.User">
    insert into sp_user (uid, username, password, 
      is_del, create_time, update_time, roles
      )
    values (#{uid,jdbcType=BIGINT}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
      #{is_del,jdbcType=BIT}, #{create_time,jdbcType=INTEGER}, #{update_time,jdbcType=INTEGER}, #{roles,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.jianzhong.demo.domain.User">
    insert into sp_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        uid,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="is_del != null">
        is_del,
      </if>
      <if test="create_time != null">
        create_time,
      </if>
      <if test="update_time != null">
        update_time,
      </if>
      <if test="roles != null">
        roles,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        #{uid,jdbcType=BIGINT},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="is_del != null">
        #{is_del,jdbcType=BIT},
      </if>
      <if test="create_time != null">
        #{create_time,jdbcType=INTEGER},
      </if>
      <if test="update_time != null">
        #{update_time,jdbcType=INTEGER},
      </if>
      <if test="roles != null">
        #{roles,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.jianzhong.demo.domain.User">
    update sp_user
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="is_del != null">
        is_del = #{is_del,jdbcType=BIT},
      </if>
      <if test="create_time != null">
        create_time = #{create_time,jdbcType=INTEGER},
      </if>
      <if test="update_time != null">
        update_time = #{update_time,jdbcType=INTEGER},
      </if>
      <if test="roles != null">
        roles = #{roles,jdbcType=VARCHAR},
      </if>
    </set>
    where uid = #{uid,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jianzhong.demo.domain.User">
    update sp_user
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      is_del = #{is_del,jdbcType=BIT},
      create_time = #{create_time,jdbcType=INTEGER},
      update_time = #{update_time,jdbcType=INTEGER},
      roles = #{roles,jdbcType=VARCHAR}
    where uid = #{uid,jdbcType=BIGINT}
  </update>
</mapper>